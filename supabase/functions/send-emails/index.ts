
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { Resend } from "npm:resend@2.0.0";
import { jsPDF } from "npm:jspdf@2.5.1";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));
const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
const supabaseKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";

// Initialize Supabase client
const supabase = createClient(supabaseUrl, supabaseKey);

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { email, formData, speechVersions, purchaseId } = await req.json();

    console.log("Sending emails to:", email);
    console.log("For purchase ID:", purchaseId);
    console.log("Form data:", formData);
    console.log("Speech versions count:", speechVersions.length);
    
    // Get the customer reference from the speech_purchases table
    const { data: purchaseData, error: purchaseError } = await supabase
      .from('speech_purchases')
      .select('customer_reference')
      .eq('id', purchaseId)
      .single();
    
    if (purchaseError) {
      console.error("Error fetching customer reference:", purchaseError);
      throw new Error("Could not fetch customer reference");
    }
    
    const customerReference = purchaseData?.customer_reference || `GSW-${purchaseId.substring(0, 8)}`;
    console.log("Customer reference:", customerReference);
    
    // Generate HTML for speech versions to display in email
    let speechsHtml = '';
    
    speechVersions.forEach((speech, index) => {
      const versionLabel = speech.versionType.charAt(0).toUpperCase() + speech.versionType.slice(1);
      speechsHtml += `
        <div style="margin-bottom: 40px; padding: 20px; border: 1px solid #e2e8f0; border-radius: 8px;">
          <h2 style="color: #4a5568; margin-bottom: 15px; font-size: 18px;">Speech Draft ${index + 1}: ${versionLabel} Version</h2>
          <p style="color: #718096; margin-bottom: 15px;">Tone: ${speech.tone.charAt(0).toUpperCase() + speech.tone.slice(1)}</p>
          <p style="color: #4a5568; margin-bottom: 15px;">Your speech is attached as a PDF to this email.</p>
        </div>
      `;
    });

    // Generate PDF attachments for each speech
    const pdfAttachments = await Promise.all(speechVersions.map(async (speech, index) => {
      try {
        const versionLabel = speech.versionType.charAt(0).toUpperCase() + speech.versionType.slice(1);
        const tone = speech.tone.charAt(0).toUpperCase() + speech.tone.slice(1);
        
        // Create a new PDF document
        const doc = new jsPDF();
        
        // Add title
        doc.setFontSize(20);
        doc.setFont("helvetica", "bold");
        doc.text(`Graduation Speech - ${versionLabel} Version`, 20, 20);
        
        // Add subtitle with name and institution
        doc.setFontSize(14);
        doc.setFont("helvetica", "normal");
        doc.text(`For: ${formData.name}`, 20, 30);
        doc.text(`Institution: ${formData.institution}`, 20, 38);
        doc.text(`Tone: ${tone}`, 20, 46);
        doc.text(`Reference: ${customerReference}`, 20, 54);
        
        // Add horizontal line
        doc.setLineWidth(0.5);
        doc.line(20, 58, 190, 58);
        
        // Format and add the speech content
        doc.setFontSize(12);
        doc.setFont("times", "normal");
        
        // Split text into lines that fit the page width
        const textLines = doc.splitTextToSize(speech.content, 170);
        
        // Add the text with proper line breaks
        let y = 68;
        const lineHeight = 7;
        
        for (let i = 0; i < textLines.length; i++) {
          // Check if we need a new page
          if (y > 270) {
            doc.addPage();
            y = 20;
          }
          
          doc.text(textLines[i], 20, y);
          y += lineHeight;
        }
        
        // Add footer
        const totalPages = doc.getNumberOfPages();
        for (let i = 1; i <= totalPages; i++) {
          doc.setPage(i);
          doc.setFontSize(10);
          doc.setTextColor(100);
          doc.text(
            `Page ${i} of ${totalPages} | Reference: ${customerReference} | Generated by Graduation Speech Writer`, 
            105, 285, 
            { align: 'center' }
          );
        }
        
        // Convert to base64 for attachment
        const pdfOutput = doc.output('arraybuffer');
        
        // Use Uint8Array instead of Buffer for Deno compatibility
        const pdfBase64 = btoa(
          new Uint8Array(pdfOutput)
            .reduce((data, byte) => data + String.fromCharCode(byte), '')
        );
        
        const fileName = `Speech_${index + 1}_${versionLabel}_Version.pdf`;
        
        // Store the PDF in the database
        try {
          const { error: storageFailed } = await supabase
            .from('speech_deliveries')
            .insert({
              purchase_id: purchaseId,
              customer_email: email,
              pdf_data: pdfBase64,
              file_name: fileName,
              version_type: speech.versionType,
              tone: speech.tone
            });
            
          if (storageFailed) {
            console.error("Error storing PDF in database:", storageFailed);
          } else {
            console.log(`Successfully stored PDF ${fileName} in database`);
          }
        } catch (dbError) {
          console.error("Database storage error:", dbError);
        }
        
        return {
          filename: fileName,
          content: pdfBase64
        };
      } catch (pdfError) {
        console.error("Error generating PDF:", pdfError);
        throw pdfError;
      }
    }));

    console.log("Successfully generated PDF attachments:", pdfAttachments.length);

    // Send email with PDF attachments
    const emailResponse = await resend.emails.send({
      from: "Graduation Speech Writer <speeches@resend.dev>",
      to: [email],
      subject: `Your Graduation Speech Drafts - ${formData.name} (Ref: ${customerReference})`,
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>Your Graduation Speech Drafts</title>
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
        </head>
        <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #2d3748; background-color: #f7fafc; margin: 0; padding: 20px;">
          <div style="max-width: 700px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <div style="text-align: center; margin-bottom: 30px;">
              <h1 style="color: #2d3748; margin-bottom: 10px;">Your Graduation Speech Drafts</h1>
              <p style="color: #718096;">Congratulations on your graduation, ${formData.name}!</p>
              <p style="color: #4a5568; font-weight: bold;">Reference Number: ${customerReference}</p>
            </div>
            
            <div style="margin-bottom: 30px;">
              <p>Dear ${formData.name},</p>
              <p>Thank you for using our Graduation Speech Writer! We're excited to provide you with three unique speech drafts for your upcoming graduation from ${formData.institution}.</p>
              <p>Each draft has a different tone and approach to help you find the perfect fit for your special day. Feel free to use these drafts as they are, combine elements from different versions, or use them as inspiration for your own speech.</p>
              <p><strong>We've attached all three speech versions as PDF files to this email.</strong> You can print them, share them, or make further edits in your preferred word processor.</p>
              <p>Please keep your reference number <strong>${customerReference}</strong> for any future inquiries about your speech.</p>
            </div>
            
            <div style="margin-bottom: 30px;">
              <h2 style="color: #2d3748; margin-bottom: 15px; text-align: center;">Your Speech Drafts</h2>
              ${speechsHtml}
            </div>
            
            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e2e8f0; color: #718096; font-size: 14px; text-align: center;">
              <p>If you have any questions or need any modifications, please don't hesitate to contact us.</p>
              <p>Wishing you all the best for your graduation ceremony!</p>
            </div>
          </div>
        </body>
        </html>
      `,
      attachments: pdfAttachments
    });

    console.log("Email sent successfully:", emailResponse);

    return new Response(
      JSON.stringify({ 
        success: true,
        emailId: emailResponse.id,
        customerReference: customerReference
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  } catch (error) {
    console.error("Error in send-emails function:", error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message || "Failed to send emails" 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
